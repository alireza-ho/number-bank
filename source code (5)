/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

struct Calculator {
    // تابع جمع
    double add(double a, double b) {
        return a + b;
    }

    // تابع تفریق
    double subtract(double a, double b) {
        return a - b;
    }

    // تابع ضرب
    double multiply(double a, double b) {
        return a * b;
    }

    // تابع توان (بازگشتی)
    double power(double base, int exponent) {
        if (exponent == 0)
            return 1;
        else if (exponent > 0)
            return base * power(base, exponent - 1);
        else // exponent < 0
            return 1 / (base * power(base, -exponent - 1));
    }

    // تابع تقسیم
    double divide(double a, double b) {
        if (b == 0) {
            std::cerr << "Error: Division by zero is undefined.\n";
            return 0; // برای مواجهه با خطا، مقدار پیش‌فرض صفر برگردانده می‌شود
        }
        return a / b;
    }

    // تابع باقی‌مانده
    int modulus(int a, int b) {
        if (b == 0) {
            std::cerr << "Error: Modulus by zero is undefined.\n";
            return 0; // برای مواجهه با خطا، مقدار پیش‌فرض صفر برگردانده می‌شود
        }
        return a % b;
    }

    // تابع اجرا
    void execute(char operation, double operand1, double operand2) {
        double result = 0;

        switch (operation) {
            case '+':
                result = add(operand1, operand2);
                break;
            case '-':
                result = subtract(operand1, operand2);
                break;
            case '*':
                result = multiply(operand1, operand2);
                break;
            case '/':
                result = divide(operand1, operand2);
                break;
            case '^':
                result = power(operand1, static_cast<int>(operand2)); // توان به صورت integer در نظر گرفته می‌شود
                break;
            case '%':
                result = modulus(static_cast<int>(operand1), static_cast<int>(operand2)); // باقی‌مانده برای اعداد integer
                break;
            default:
                std::cerr << "Error: Invalid operation.\n";
                return;
        }

        std::cout << "Result: " << operand1 << " " << operation << " " << operand2 << " = " << result << std::endl;
    }
};

int main() {
    Calculator calc;
    char operation;
    double operand1, operand2;

    std::cout << "Enter operation (+, -, *, /, ^, %): ";
    std::cin >> operation;

    std::cout << "Enter operand1 and operand2: ";
    std::cin >> operand1 >> operand2;

    calc.execute(operation, operand1, operand2);

    return 0;
}